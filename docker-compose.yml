x-airflow-common: &airflow-common
  image: apache/airflow:2.7.3-python3.11
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: "true"
  volumes:
    - airflow-dags:/opt/airflow/dags
    - airflow-logs:/opt/airflow/logs
    - airflow-plugins:/opt/airflow/plugins
    - ./examples/dags:/opt/airflow/dags/examples
    - ./examples/jobs:/opt/airflow/jobs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - bigdata-network

services:
  # PostgreSQL - Banco de dados para Airflow, Superset e Hive Metastore
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: airflow,superset,metastore
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - bigdata-network

  # MinIO - Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - bigdata-network

  # MinIO Client - Para criar buckets iniciais
  minio-client:
    image: minio/mc:latest
    container_name: minio-client
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb myminio/bronze --ignore-existing;
      mc mb myminio/silver --ignore-existing;
      mc mb myminio/gold --ignore-existing;
      mc mb myminio/warehouse --ignore-existing;
      mc mb myminio/raw --ignore-existing;
      mc anonymous set download myminio/bronze;
      mc anonymous set download myminio/silver;
      mc anonymous set download myminio/gold;
      echo 'Buckets criados com sucesso';
      exit 0;
      "
    networks:
      - bigdata-network

  # Hive Metastore - Catálogo de dados
  hive-metastore:
    build:
      context: ./config/hive
      dockerfile: Dockerfile
    image: mini-bigdata-hive:4.0.0
    container_name: hive-metastore
    environment:
      DB_DRIVER: postgres
      SERVICE_NAME: metastore
      SERVICE_OPTS: "-Xmx1G -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/metastore -Djavax.jdo.option.ConnectionUserName=${POSTGRES_USER} -Djavax.jdo.option.ConnectionPassword=${POSTGRES_PASSWORD}"
    ports:
      - "${HIVE_METASTORE_PORT}:9083"
    volumes:
      - ./config/hive/metastore-site.xml:/opt/hive/conf/metastore-site.xml
      - hive-warehouse:/opt/hive/data/warehouse
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "timeout 2 bash -c '</dev/tcp/localhost/9083' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - bigdata-network

  # Spark Master
  spark-master:
    image: apache/spark:3.5.3
    container_name: spark-master
    user: root
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_NO_DAEMONIZE=true
    command: >
      bash -c "mkdir -p /opt/spark/logs /opt/spark/work &&
               chown -R root:root /opt/spark/logs /opt/spark/work &&
               /opt/spark/sbin/start-master.sh -h spark-master -p 7077 --webui-port 8080 &&
               tail -f /opt/spark/logs/*"
    ports:
      - "${SPARK_MASTER_PORT}:7077"
      - "${SPARK_MASTER_WEBUI_PORT}:8080"
    volumes:
      - spark-master-work:/opt/spark/work
      - ./examples/jobs:/opt/spark-jobs
    restart: unless-stopped
    networks:
      - bigdata-network

  # Spark Worker
  spark-worker:
    image: apache/spark:3.5.3
    container_name: spark-worker
    user: root
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_NO_DAEMONIZE=true
    command: >
      bash -c "mkdir -p /opt/spark/logs /opt/spark/work &&
               chown -R root:root /opt/spark/logs /opt/spark/work &&
               sleep 15 &&
               /opt/spark/sbin/start-worker.sh spark://spark-master:7077 -c 2 -m 2G --webui-port 8081 &&
               tail -f /opt/spark/logs/*"
    ports:
      - "${SPARK_WORKER_WEBUI_PORT}:8081"
    volumes:
      - spark-worker-work:/opt/spark/work
      - ./examples/jobs:/opt/spark-jobs
    depends_on:
      - spark-master
    restart: unless-stopped
    networks:
      - bigdata-network

  # Trino - Query Engine com suporte JDBC/REST e S3A
  trino:
    build:
      context: ./config/trino
      dockerfile: Dockerfile
    image: mini-bigdata-trino:435-s3a
    container_name: trino
    ports:
      - "8085:8080"
    volumes:
      - ./config/trino/config.properties:/etc/trino/config.properties
      - ./config/trino/catalog:/etc/trino/catalog
      - trino-data:/data/trino
    depends_on:
      - hive-metastore
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - bigdata-network

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow Init - Inicialização do banco
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins} 2>/dev/null || true
        airflow db migrate
        airflow users create \
          --username ${AIRFLOW_USER} \
          --firstname ${AIRFLOW_FIRSTNAME} \
          --lastname ${AIRFLOW_LASTNAME} \
          --role Admin \
          --email ${AIRFLOW_EMAIL} \
          --password ${AIRFLOW_PASSWORD} 2>/dev/null || \
        echo "User may already exist"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD}

  # Redis - Cache e message broker para Superset
  redis:
    image: redis:7.2-alpine
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - bigdata-network

  # Apache Superset - BI e Dashboards
  superset:
    image: apache/superset:4.1.4
    container_name: superset
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_LOAD_EXAMPLES: "no"
      DATABASE_DIALECT: postgresql
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_DB: superset
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      SUPERSET_ADMIN_USER: ${SUPERSET_ADMIN_USER}
      SUPERSET_ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      SUPERSET_ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Suprimir warnings conhecidos do Python
      PYTHONWARNINGS: "ignore::DeprecationWarning"
    ports:
      - "8088:8088"
    volumes:
      - superset-data:/app/superset_home
      - ./config/superset/superset_config.py:/app/pythonpath/superset_config.py
      - ./config/superset/requirements.txt:/app/pythonpath/requirements.txt
      - ./config/superset/init-superset.sh:/app/init-superset.sh
    command: ["/bin/bash", "/app/init-superset.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bigdata-network

networks:
  bigdata-network:
    driver: bridge
    name: ${NETWORK_NAME}

volumes:
  # Volumes persistidos em /media/marcelo/dados1/bigdata-docker
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/postgres

  minio-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/minio

  airflow-dags:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/airflow/dags

  airflow-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/airflow/logs

  airflow-plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/airflow/plugins

  hive-warehouse:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/hive

  spark-master-work:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/spark/master

  spark-worker-work:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/spark/worker

  trino-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/trino

  superset-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/superset

  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/marcelo/dados1/bigdata-docker/redis
